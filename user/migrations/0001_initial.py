# Generated by Django 4.0.2 on 2022-03-01 15:31

from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uid', models.CharField(default=uuid.uuid1, max_length=50, primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'A user with this email already exists'}, max_length=254, null=True, unique=True, verbose_name='email_address')),
                ('username', models.CharField(default=uuid.uuid1, error_messages={'unique': 'A user with this username already exists'}, max_length=255, unique=True, verbose_name='username')),
                ('secret_code', models.CharField(default=uuid.uuid1, max_length=255, verbose_name='secret_code')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active', verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, help_text='Designate whether the user can log into this admin site', verbose_name='staff_status')),
                ('is_admin', models.BooleanField(default=False, help_text='Designate whether the user should be treated as admin', verbose_name='admin')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
